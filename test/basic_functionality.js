var test = require('tap').test
var SessionManager = require("../")

test("MOCKING it out, yo", function(t) {
	var logOutAfterThisManySecondsOfInactivity = 5
	var sessions = new SessionManager(logOutAfterThisManySecondsOfInactivity, 10)

	var mySession = sessions.createSession()

	var theKeyYouPutOnTheCookie = mySession.getSessionKey()
	t.equal(typeof theKeyYouPutOnTheCookie, "string")

	t.equal(typeof mySession.getUserId(), "undefined")

	var userId = 'me@JoshDuff.com'
	var loginKey = mySession.getLoginKey(userId)
	t.equal(typeof loginKey, "string")
	t.equal(mySession.getUserId(), userId)

	//////////// ^^^ the user hits the login button


	////// Here, they clicked on the link
	var thatSameSession = sessions.getSession(theKeyYouPutOnTheCookie)

	thatSameSession.login('This key better not be generated by the library, srsly')
	t.notOk(thatSameSession.isLoggedIn())

	thatSameSession.login(loginKey)
	t.ok(thatSameSession.isLoggedIn())

	// This call will be ignored and nothing will happen because the login key was already used
	thatSameSession.login(loginKey)
	
	var loggedIn = thatSameSession.isLoggedIn()
	t.ok(loggedIn)

	sessions.on('loggedout', function(session) {
		t.ok(loggedIn)
		loggedIn = false
	})

	// After a certain amount of time, sessions are automatically logged out
	setTimeout(function() {
		t.notOk(loggedIn)

		// Login keys become invalid as soon as they are used
		thatSameSession.login(loginKey)
		t.notOk(thatSameSession.isLoggedIn())

		t.end()
	}, 5500)
})

test("After a certain amount of time, login keys become invalid", function(t) {
	var logOutAfterThisManySecondsOfInactivity = 5
	var loginKeysExpireAfterThisManySeconds = 5
	var sessions = new SessionManager(logOutAfterThisManySecondsOfInactivity, loginKeysExpireAfterThisManySeconds)

	var mySession = sessions.createSession()

	var userId = 'me@JoshDuff.com'
	var loginKey = mySession.getLoginKey(userId)

	setTimeout(function() {
		mySession.login(loginKey)
		t.notOk(thatSameSession.isLoggedIn())

		test("But it works if you do it before the key expires", function(t) {
			var loginKeyTakeTwo = mySession.getLoginKey(userId)
			setTimeout(function() {
				mySession.login(loginKeyTakeTwo)
				t.ok(thatSameSession.isLoggedIn())
				t.end()
			}, 3000)
		})
	}, 5500)

})

test("Only one email address associated with a session", function(t) {
	// One email address associated with a session key at a time (the most recent)
	// If an email address is logged in on a session, and that session tries to log in with a new email address,
	// log that session out for the previous email address

	var logOutAfterThisManySecondsOfInactivity = 5
	var loginKeysExpireAfterThisManySeconds = 5
	var sessions = new SessionManager(logOutAfterThisManySecondsOfInactivity, loginKeysExpireAfterThisManySeconds)

	var mySession = sessions.createSession()

	var firstLoginKey = mySession.getLoginKey('misspelled@whatever.com')
	t.equal(mySession.getUserId(), 'misspelled@whatever.com')

	var secondLoginKey = mySession.getLoginKey('theRightEmailAddress@stuff.com')
	t.equal(mySession.getUserId(), 'theRightEmailAddress@stuff.com')

	mySession.login(firstLoginKey)
	t.notOk(mySession.isLoggedIn())

	mySession.login(secondLoginKey)
	t.ok(mySession.isLoggedIn())
	t.equal(mySession.getUserId(), 'theRightEmailAddress@stuff.com')

	var thirdLoginKey = mySession.getLoginKey('someOtherEmailAddress@whatever.com')
	t.equal(mySession.getUserId(), 'someOtherEmailAddress@whatever.com')
	t.notOk(mySession.isLoggedIn())
	mySession.login(thirdLoginKey)
	t.ok(mySession.isLoggedIn())

	t.end()
})

test("Only the most recent login key works", function(t) {
	var logOutAfterThisManySecondsOfInactivity = 5
	var loginKeysExpireAfterThisManySeconds = 5
	var sessions = new SessionManager(logOutAfterThisManySecondsOfInactivity, loginKeysExpireAfterThisManySeconds)

	var mySession = sessions.createSession()

	var firstLoginKey = mySession.getLoginKey('misspelled@whatever.com')
	t.equal(mySession.getUserId(), 'misspelled@whatever.com')

	var secondLoginKey = mySession.getLoginKey('misspelled@whatever.com')

	mySession.login(firstLoginKey)
	t.notOk(mySession.isLoggedIn())

	mySession.login(secondLoginKey)
	t.ok(mySession.isLoggedIn())

	t.end()
})